---
title: "Space time Occupacy model with INLA"
format: 
  html:
    embed-resources: true
editor: source
#  markdown: 
#    wrap: 72
editor_options: 
  chunk_output_type: console
bibliography: references.bib
execute: 
  echo: true
  warning: false
  message: false
  collapse: true
---

# Introduction

In this document we show how to fit a space time occunpacy model for the dataset "hbefTrends" in the 'spOccupacy' library.

```{r setup}
#| message: false
#| warning: false

library(INLA) 
library(tidyverse)
library(spOccupancy)
library(scico)
library(patchwork)
library(kableExtra)
library(sf)
library(terra)
library(tidyterra)

rm(list = ls())

plot_inla_effects = function(effect)
{
  p1 = ggplot(data.frame(effect)) +
    geom_line(aes(ID, -mean)) + 
    geom_ribbon(aes(ID, ymin = -X0.025quant, ymax = -X0.975quant),
                alpha = 0.5)
  print(p1)
  
}


theme_maps = theme(axis.line=element_blank(),
                   axis.text.x=element_blank(),
                   axis.text.y=element_blank(),
                   axis.ticks=element_blank(),
                   axis.title.x=element_blank(),
                   axis.title.y=element_blank()
                   #legend.position="none",
                   #panel.background=element_blank(),
                   #panel.border=element_blank(),
                   #panel.grid.major=element_blank(),
                   #panel.grid.minor=element_blank(),
                   #plot.background=element_blank()
)
```

# Load and prepare the data

We first load the data and select the species of interest. Here we choose BTBW which is not one of the rare species present in the dataset.

Afterwards we prepare the data in the format that is required by the INLA library

```{r}

data(hbefTrends)

revi.data <- hbefTrends
sp.names <- dimnames(hbefTrends$y)[[1]]
revi.data$y <- revi.data$y[sp.names == 'REVI', , , ]
revi.data$coords = revi.data$coords/1000 #get this in km!

## data preparation for inla -----------------------------------------------
Y = data.frame(revi.data$y[,1,])
Xdet.day = revi.data$det.covs$day[,1,]
Xdet.tod = revi.data$det.covs$tod[,1,]

for(i in 2:9)
{
  Y = rbind(Y, data.frame(revi.data$y[,i,]))
  Xdet.day = rbind(Xdet.day, revi.data$det.covs$day[,i,])
  Xdet.tod = rbind(Xdet.tod, revi.data$det.covs$tod[,i,])
}
Xdet.day = (Xdet.day - mean(Xdet.day, na.rm = T))/sd(Xdet.day,na.rm = T) 
Xdet.tod = (Xdet.tod - mean(Xdet.tod, na.rm = T))/sd(Xdet.tod,na.rm = T) 

Xdet = cbind(1, Xdet.day[,1], Xdet.tod[,1],
             1, Xdet.day[,2], Xdet.tod[,2],
             1, Xdet.day[,3], Xdet.tod[,3])


Xocc = data.frame(x = rep(revi.data$coords[,1],9),
                  y = rep(revi.data$coords[,2],9),
                  elev = rep(revi.data$occ.covs$elev,9),
                  scale_elev = scale(rep(revi.data$occ.covs$elev,9)),
                 scale_elev2 = scale(rep(revi.data$occ.covs$elev,9))^2,
                  site = rep(1:373,9),
                  time = rep(1:9,each = 373),
                  Int_occ = 1) %>%
  mutate(scale_time = scale(time))









```

```{r}

r = rast(nrows=100, ncols=100, 
                                            xmin=274, xmax=284,
                                            ymin=4866, ymax=4872)

elev_raster= resample(terra::rast(data.frame(x =  hbefElev$Easting/1000,
                                    y = hbefElev$Northing/1000,
                                    z =  hbefElev$val)), r)

elev_raster2 = elev_raster
values(elev_raster2) <- (values(elev_raster2) - mean(revi.data$occ.covs$elev)) / sd(revi.data$occ.covs$elev)

elev_raster22 = resample(elev_raster, rast(nrows=100, ncols=100, 
                                            xmin=274, xmax=284,
                                            ymin=4866, ymax=4872))
values(elev_raster22) <- values(elev_raster2^2)


all_elev = inla.group(c(Xocc$elev, values(elev_raster)))
val_elev = sort(na.omit(unique(all_elev)))
Xocc$group_elev = all_elev[1:dim(Xocc)[1]]

elev_group_raster = elev_raster
values(elev_group_raster) <- all_elev[-c(1:dim(Xocc)[1])]



pred_df = data.frame(x = rep(crds(elev_raster2, na.rm = F)[,1],9),
                     y = rep(crds(elev_raster2, na.rm = F)[,2],9),
                     scale_elev = rep(values(elev_raster2),9),
                     scale_elev2 = rep(values(elev_raster22),9),
                     group_elev = rep(values(elev_group_raster),9),
                     time = rep(c(1:9), each= length(values(elev_raster2)))) %>%
  dplyr::filter(!is.na(scale_elev))



```

# Model fit

## Model 1

This is a separable space time model with linear predictos $$
\eta_{st} = \beta_0 + f_1(\text{elev}) + f_2(t) + f_3(s)
$$ where $f_1(\text{elev})$ is a smooth (RW2) effect of the elevation $f_2(t)$ is a AR1 effect of time $f_3(s)$ is an IID effect of location

```{r}
formula1 = inla.mdata(Y,X) ~ -1 + Int_occ +  
  #f(group_elev,model = "rw2", values = val_elev) + 
  scale_elev + 
  scale_elev2 + 
  f(site, model =  "iid") + 
  f(time, model = "iid")
  #scale_time


data_list = as.list(Xocc)
data_list$Y = Y
data_list$X = Xdet


time0 = system.time(model1 <- inla(formula1, 
                                   data=data_list,   
                                   family= 'occupancy',   
                                   verbose = FALSE,
                                   control.compute = list( config = TRUE,
                                                           dic  = T,
                                                           waic = T),
                                   control.fixed = list(prec.intercept = 1/2.72,
                                                        prec = 1/2.72),
                                   control.predictor = list(link  =1),
                                   control.family = list(control.link = list(model = "logit"), 
                                                         link.simple = "logit",
                                                         hyper = list(beta1 = list(param = c(0,1/2.72), 
                                                                                   initial = 0),
                                                                      beta2 = list(param = c(0,1/2.72)),
                                                                      beta3 = list(param = c(0,1/2.72)),
                                                                      beta4 = list(param = c(0,1/2.72)),
                                                                      beta5 = list(param = c(0,1/2.72))))))




```



## Model 2

```{r}
# set up spatial model for INLA
boundary = inla.nonconvex.hull(points = revi.data$coords, convex = .3)
mesh = inla.mesh.2d(boundary = boundary,
                    #   loc = cbind(data$X, data$Y),
                    max.edge = c(0.1,0.7),
                    min.angle = 20,
                    offset = c(.01, 1),
                    cutoff = 0.12,
)
ggplot() + inlabru::gg(mesh) +
  coord_equal() + theme_maps


spde <- inla.spde2.pcmatern(
  mesh = mesh, 
  prior.range = c(5, 0.01), # prior for range
  prior.sigma = c(1, 0.5))  # prior for sd parameter

```

This is a space-time model with linear predictor as $$
\eta_{st} = \beta_0 + f_1(\text{elev}) + f_2(t) + \omega(s) 
$$ with $f_1()$ and $f_2()$ as before while $\omega(s)$ is a gaussian spatial field

```{r}


iset_sp <- inla.spde.make.index(name = "spatialfield",
                                n.spde =  spde$n.spde,
                                n.group = 9)

A_sp <- inla.spde.make.A(mesh = mesh, 
                         loc = cbind(Xocc$x, Xocc$y),
                         group = Xocc$time)

# stk <- inla.stack(data=list(Y = Y,  X = X), #the response
#                   A=list(A_sp,1),  #the A matrix; the 1 is included to make the list(covariates)
#                   effects=list(c(list(Int_occ=1), #the Intercept
#                                  iset_sp),  #the spatial index
#                                #the covariates
#                                list(scale_elev = scale(Xocc[,1]))), 
#                   tag='dat')

stk <- inla.stack(data=list(Y = Y,  X = Xdet), # The responde
                  A=list(A_sp,1),  #the A matrix; the 1 is included to make the list(covariates)
                  effects=list(c(list(Int_occ=1), #the Intercept
                                 iset_sp),  #the spatial index
                               #the covariates
                               as.list(Xocc)), 
                  #this is a quick name so yo can call upon easily
                  tag='dat')

formula3_2 <- inla.mdata(Y,X) ~ 
  -1 + Int_occ +  
  #time +
  scale_elev + scale_elev2 + 
  f(time, model = "iid") + 
  #f(group_elev, model = "rw2", values = val_elev) + 
  f(spatialfield, model=spde) 


time2 = system.time(model3_2 <- inla(formula3_2, 
                                     data=inla.stack.data(stk),  
                                     family= 'occupancy',  
                                     control.fixed =  list(prec = 1, prec.intercept = 1),
                                     control.predictor=list(A=inla.stack.A(stk),
                                                            compute=TRUE), 
                                     control.compute = list(dic = TRUE, waic = TRUE, 
                                                            config = TRUE), 
                                     verbose = F,
                                    #control.inla=list(cmin=eps, b.strategy="keep"),

                                     control.family = list(control.link = list(model = "logit"), 
                                                           link.simple = "logit",
                                                           hyper = list(beta1 = list(param = c(0,1/3), 
                                                                                   initial = 0),
                                                                      beta2 = list(param = c(0,1/3)),
                                                                      beta3 = list(param = c(0,1/3)),
                                                                      beta4 = list(param = c(0,1/3)),
                                                                      beta5 = list(param = c(0,1/3))))))
```

## Model 3

The last model is defined as: $$
\eta_{st} = \beta_0 + f_1(\text{elev}) +  \omega(s,t) 
$$ with $f_1()$ is as before while $\omega(s,t)$ is a space-time gaussian spatial field with AR1 time component

```{r}

h.spec <- list(rho = list(prior = 'pc.cor0', param = c(0.5, 0.1)))
spde <- inla.spde2.pcmatern(
  mesh = mesh, 
  prior.range = c(5, 0.7),
  prior.sigma = c(1, 0.5),
  constr = T) 

formula3_3 <- inla.mdata(Y,X) ~ 
  -1   + Int_occ + 
  scale_elev +
  scale_elev2 + 
 # f(group_elev, model = "rw2", values = val_elev) + 
  f(time, model = "iid") + 
  f(spatialfield, 
    model=spde, 
    group = spatialfield.group, 
    control.group = list(model = 'ar1', hyper = h.spec))

time3 = system.time(model3_3 <- inla(formula3_3, #the formula
                                     data=inla.stack.data(stk),  #the data stack
                                     family= 'occupancy',   #which family the data comes from
                                     control.fixed =  list(prec = 1, prec.intercept = 1),
                                     control.predictor=list(A=inla.stack.A(stk),
                                                            compute=TRUE),  #compute gives you the marginals of the linear predictor
                                     control.compute = list(dic = TRUE, waic = TRUE, 
                                                            config = TRUE), #model diagnostics and config = TRUE gives you the GMRF
                                    

                                     verbose = F,
                                     control.family = list(control.link = list(model = "logit"), 
                                                                                    link.simple = "logit",
                                                           hyper = list(beta1 = list(param = c(0,10), 
                                                                                   initial = 0),
                                                                      beta2 = list(param = c(0,10)),
                                                                      beta3 = list(param = c(0,10)),
                                                                      beta4 = list(param = c(0,10)),
                                                                      beta5 = list(param = c(0,10))))))


```

# Results and Predictions

```{r}
#| label: sample
#| # posterior samples -------------------------------------------------------

sample1 = inla.posterior.sample(1000, model1)
sample2 = inla.posterior.sample(1000, model3_2)
sample3 = inla.posterior.sample(1000, model3_3)

```

## Results

### Model comparison


```{r}



df_sf <- Xocc %>% mutate(id = 1:nrow(Xocc)) %>% st_as_sf(coords =c("x","y"))

# create buffer of size 300 (based on estimated range) centred at each site

buffer_25 <- st_buffer(df_sf, dist = 0.75) 

# empty lists to include the indexes of the leave-out-group for each observation i
I_i <- list()

# loop though each observation and store the leave-out-group based on the buffer
for( i in 1:nrow(df_sf)){
  
  # Temporal filtering of data within a 2 years of span of  observation i
  df_sf_subset <- df_sf %>% 
    filter( between(time,left = df_sf$time[i]-2, right = df_sf$time[i]+2)) 
  # Spatial filtering of the observations that are within the buffer of the ith observation
  Buffer_i <-df_sf_subset %>% st_intersects(buffer_25[i,],sparse = FALSE) %>% # identify 
    unlist()
  
  # obtain the indexes of the leave out group
  I_i[[i]] <-  df_sf_subset[Buffer_i,] %>%  pull(id)
  
}

## Example for the the 200th test point  
ggplot()+geom_sf(data=df_sf)+
  facet_wrap(~time)+
  geom_sf(data=df_sf[I_i[[1500]],],color="orange")+
  geom_sf(data = df_sf[1500,],colour="purple") +
  geom_sf(data=buffer_25[1500,],color="red",alpha=0)



loocv_m1_auto <- inla.group.cv(result = model1,num.level.sets = 3)
ULOOCV_auto  = mean(log(loocv_m1_auto$cv),na.rm=T)

loocv_m2_auto <- inla.group.cv(result = model3_2,group.cv = loocv_m1_auto)
ULOOCV2_auto  = mean(log(loocv_m2_auto$cv),na.rm=T)

loocv_m3_auto <- inla.group.cv(result = model3_3,group.cv = loocv_m1_auto)
ULOOCV3_auto = mean(log(loocv_m3_auto$cv),na.rm=T)


loocv_m1_manual <- inla.group.cv(result = model1,groups = I_i )
ULOOCV_manual = mean(log(loocv_m1_manual$cv),na.rm=T)

loocv_m2_manual <- inla.group.cv(result = model3_2,group.cv = loocv_m1_manual)
ULOOCV2_manual = mean(log(loocv_m2_manual$cv),na.rm=T)

loocv_m3_manual <- inla.group.cv(result = model3_3,group.cv = loocv_m1_manual)
ULOOCV3_manual = mean(log(loocv_m3_manual$cv),na.rm=T)


 data.frame(auto= c(ULOOCV_auto,ULOOCV2_auto,ULOOCV3_auto),
            manual=c(ULOOCV_manual,ULOOCV2_manual,ULOOCV3_manual))


 


```

```{r}
table = data.frame(elapsed_Time = c(time0["elapsed"], time2["elapsed"], time3["elapsed"]),
                    DIC = c(model1$dic$dic, model3_2$dic$dic, model3_3$dic$dic),
                    WAIC = c(model1$waic$waic, model3_2$waic$waic, model3_3$waic$waic),
                    mlik = c(model1$mlik[1,1],model3_2$mlik[1,1],model3_3$mlik[1,1]),
                    LGOCV_auto = c(ULOOCV_auto,ULOOCV2_auto,ULOOCV3_auto),
                    LGOCV_manual = c(ULOOCV_manual,ULOOCV2_manual,ULOOCV3_manual))
 rownames(table) = paste("Model", c(1:3))
 kable(table)
 
 
#tt = round(table,2)
#cbind(row.names(table),paste(tt[,1],"(",tt[,2],",",tt[,3],")", sep = ""))

tt = round(rbind(model1$summary.fixed[,c(1,3,5)],
      model3_2$summary.fixed[,c(1,3,5)],
      model3_3$summary.fixed[,c(1,3,5)]),2)
cbind(row.names(tt),paste(tt[,1],"(",tt[,2],",",tt[,3],")", sep = "")) 
 
 
```



## Predictions over space

```{r}
yy = c(1,9)
pred1 = pred_df %>% dplyr::filter(time%in%yy)
A3_2 = inla.spde.make.A(mesh= mesh, loc = cbind(pred1$x, pred1$y))
A3_3 = inla.spde.make.A(mesh= mesh, loc = cbind(pred1$x, pred1$y),
                        group = pred1$time)

func1 = function(...)
{
   aa = (Int_occ + 
           scale_elev * pred1$scale_elev +
          scale_elev2 * pred1$scale_elev2 +
          time[pred1$time]
  )
  rand = rnorm(length(pred1$scale_elev), 0, 1/sqrt(theta[4]))
  aa + 
    rand
}
func3_2 = function(...)
{
  aa = (Int_occ + 
           scale_elev * pred1$scale_elev +
          scale_elev2 * pred1$scale_elev2 +
           time[pred1$time] +
           (A3_2 %*% spatialfield)[,1] )
  aa
}
func3_3 = function(...)
{
  aa = (Int_occ + 
           scale_elev * pred1$scale_elev +
          scale_elev2 * pred1$scale_elev2 +
           time[pred1$time] +
           (A3_3 %*% spatialfield)[,1] 
  )
  aa
}
fix1 = inla.posterior.sample.eval(func1, sample1)
fix3_2 = inla.posterior.sample.eval(func3_2, sample2)
fix3_3 = inla.posterior.sample.eval(func3_3, sample3)


pred2 = pred1 %>%
  mutate(sd1 = apply(fix1,1,sd),
         mean1 = apply(fix1,1,mean),
         sd2 = apply(fix3_2,1,sd),
         mean2 = apply(fix3_2,1,mean),
         sd3 = apply(fix3_3,1,sd),
         mean3 = apply(fix3_3,1,mean)) 


# New facet label names for time variable
time.labs <-  c("2010", "2018") 
names(time.labs) <- c("1", "9")

# New facet label names for name variable
model.labs <- c("Model 1", "Model 2","Model 3")
names(model.labs) <- c("mean1", "mean2","mean3")

pred2 %>% dplyr::select(x,y,time, mean1, mean2, mean3) %>%
  pivot_longer(-c(x,y,time)) %>%
  ggplot() + geom_tile(aes(x,y,fill = value)) +
  coord_equal() + 
  facet_grid(time~name,labeller = labeller(time = time.labs, name = model.labs)) + scale_fill_scico(name="Occupancy \nprobability \n(logit-scaled)") + theme_maps +
   theme(text=element_text(family="serif", size=20),
                                               legend.text = element_text(size=16))

ggsave(filename = "space_time_Occ_lprobs.pdf",dpi = 300,width = 4000,units = "px")


# New facet label names for name variable
model.labs <- c("Model 1", "Model 2","Model 3")
names(model.labs) <- c("sd1", "sd2","sd3")

pred2 %>% dplyr::select(x,y,time, sd1, sd2, sd3) %>%
  pivot_longer(-c(x,y,time)) %>%
  ggplot() + geom_tile(aes(x,y,fill = value)) +
  coord_equal() + 
  facet_grid(time~name,labeller = labeller(time = time.labs, name = model.labs)) + scale_fill_scico(name="Occupancy \nprobability  sd\n(logit-scaled)") + theme_maps +
   theme(text=element_text(family="serif", size=20),
                                               legend.text = element_text(size=16))

ggsave(filename = "space_time_Occ_lprobsSD.pdf",dpi = 300,width = 4000,units = "px")

#' Probability of occurrence

probs1 = inla.link.logit(fix1, inverse = T)
quant1 = apply(probs1,1,quantile, c(0.025, 0.975))
probs2 = inla.link.logit(fix3_2, inverse = T)
quant2 = apply(probs2,1,quantile, c(0.025, 0.975))
probs3 = inla.link.logit(fix3_3, inverse = T)
quant3 = apply(probs3,1,quantile, c(0.025, 0.975))

pred2 = pred1 %>%
  mutate(mean1 = apply(probs1,1,mean),
         quant_range1 = quant1[2,]-quant1[1,],
         mean2 = apply(probs2,1,mean),
         quant_range2 = quant2[2,]-quant2[1,],
         mean3 = apply(probs3,1,mean),
         quant_range3 = quant3[2,]-quant3[1,]) 

pred2 %>% dplyr::select(x,y,time, mean1, mean2, mean3) %>%
  pivot_longer(-c(x,y,time)) %>%
  ggplot() + geom_tile(aes(x,y,fill = value)) +
  coord_equal() + 
   facet_grid(time~name,labeller = labeller(time = time.labs, name = model.labs)) + scale_fill_scico(name="Occupancy \nprobability") + theme_maps +
   theme(text=element_text(family="serif", size=20),
                                               legend.text = element_text(size=16))


ggsave(filename = "space_time_Occ_probs.pdf",dpi = 300,width = 4000,units = "px")

model.labs <- c("Model 1", "Model 2","Model 3")
names(model.labs) <- c("quant_range1", "quant_range2","quant_range3")

pred2 %>% dplyr::select(x,y,time, quant_range1, quant_range2, quant_range3) %>%
  pivot_longer(-c(x,y,time)) %>%
  ggplot() + geom_tile(aes(x,y,fill = value)) +
  coord_equal() + 
  facet_grid(time~name,labeller = labeller(time = time.labs, name = model.labs)) + scale_fill_scico(name="Difference in \nquantile") + theme_maps +
   theme(text=element_text(family="serif", size=20),
                                               legend.text = element_text(size=16))

ggsave(filename = "space_time_Occ_qunatiles.pdf",dpi = 300,width = 4000,units = "px")

```

## Parameters for the detection part of the model

```{r}
# detection paramters ------------------------------------------------------

npar = 3
tab1 = rbind(model1$summary.hyperpar[1:npar,c(1,3,5)],
             model3_2$summary.hyperpar[1:npar,c(1,3,5)],
             model3_3$summary.hyperpar[1:npar,c(1,3,5)])
rownames(tab1) = c (c("Int detection1", "day1", "tod1"),
                    c("Int detection2", "day2", "tod2"),
                    c("Int detection3", "day3", "tod3"))

kable(tab1, booktabs = TRUE, digits = 2) %>% pack_rows(
  index = c("Model 1" = npar, "Model 2" = npar, "Model 3" = npar))



#tt = round(tab1,2)
#cbind(row.names(tab1),paste(tt[,1],"(",tt[,2],",",tt[,3],")", sep = ""))

```


## Using spOccupancy

```{r}
#| eval = FALSE
#| 
library(spOccupancy)

revi.sp.occ.formula <- ~ scale(elev) + scale(elev)^2 + scale(years)
revi.sp.det.formula <- ~ scale(day) +  scale(tod)


z.inits <- apply(revi.data$y, c(1, 2), function(a) as.numeric(sum(a, na.rm = TRUE) > 0))
# Pair-wise distance between all sites
dist.hbef <- dist(revi.data$coords)
revi.sp.inits <- list(beta = 0, alpha = 0, z = z.inits,
                      sigma.sq = 1, phi = 3 / mean(dist.hbef),
                      sigma.sq.t = 1.5, rho = 0.2)
revi.sp.priors <- list(beta.normal = list(mean = 0, var = 2.72),
                       alpha.normal = list(mean = 0, var = 2.72),
                       sigma.sq.t.ig = c(2, 0.5),
                       rho.unif = c(-1, 1),
                       sigma.sq.ig = c(2, 1),
                       phi.unif = c(3 / max(dist.hbef), 3 / min(dist.hbef)),
                       nu.unif =c(0,1))

cov.model <- 'matern'
n.neighbors <- 5
ar1 <- FALSE

n.batch <- 600
batch.length <- 25
n.burn <- 10000
n.thin <- 20


# Approx. run time: ~ 2.5 min
out.sp <- stPGOcc(occ.formula = revi.sp.occ.formula,
                   det.formula = revi.sp.det.formula,
                   data = revi.data,
                   inits = revi.sp.inits,
                   priors = revi.sp.priors,
                   cov.model = cov.model,
                   n.neighbors = n.neighbors,
                   n.batch = n.batch,
                   batch.length = batch.length,
                   verbose = TRUE,
                   ar1 = ar1,
                   n.report = 200,
                   n.burn = n.burn,
                   n.thin = n.thin,
                   n.chains = 3)


out.sp|>summary()

# Number of prediction sites.
J.pred <- nrow(hbefElev)
# Number of prediction years.
n.years.pred <- 2
# Number of predictors (including intercept)
p.occ <- ncol(out.sp$beta.samples)
# Get covariates and standardize them using values used to fit the model
elev.pred <- (hbefElev$val - mean(revi.data$occ.covs$elev)) / sd(revi.data$occ.covs$elev)
year.pred <- matrix(rep((c(2010, 2018) - mean(revi.data$occ.covs$years)) /
            sd(revi.data$occ.covs$years),
                    length(elev.pred)), J.pred, n.years.pred, byrow = TRUE)
# Create three-dimensional array
X.0 <- array(1, dim = c(J.pred, n.years.pred, p.occ))
# Fill in the array
# Years
X.0[, , 2] <- year.pred
# Elevation
X.0[, , 3] <- elev.pred
# Elevation^2
X.0[, , 4] <- elev.pred^2
# Check out the structure
str(X.0)
# Indicate which primary time periods (years) we are predicting for
t.cols <- c(1, 9)
# Approx. run time: < 30 sec
coords.0 <- cbind(hbefElev$Easting,hbefElev$Northing)
out.pred <- predict(out.sp, X.0,coords.0, t.cols = t.cols, ignore.RE = TRUE, type = 'occupancy')
# Check out the structure
str(out.pred)
plot.dat <- data.frame(x = hbefElev$Easting,
                       y = hbefElev$Northing,
                       mean.2009.psi = apply(out.pred$psi.0.samples[, , 1], 2, mean),
                       mean.2018.psi = apply(out.pred$psi.0.samples[, , 2], 2, mean),
                       sd.2009.psi = apply(out.pred$psi.0.samples[, , 1], 2, sd),
                       sd.2018.psi = apply(out.pred$psi.0.samples[, , 2], 2, sd),
                       stringsAsFactors = FALSE)
# Make a species distribution map showing the point estimates,
# or predictions (posterior means)
dat.stars <- st_as_stars(plot.dat, dims = c('x', 'y'))
# 2009
ggplot() +
  geom_stars(data = dat.stars, aes(x = x, y = y, fill = mean.2009.psi)) +
  scale_fill_viridis_c(na.value = 'transparent') +
  labs(x = 'Easting', y = 'Northing', fill = '',
       title = '') +
  theme_bw()



data %>% 
  group_by(time) %>%
  summarise(m = mean(counts/nvisits)) %>%
  ggplot() + geom_point(aes(x = time, y = m)) 
```
